package com.synchophy.server.db;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class DatabaseManager {

  ThreadLocal connection = new ThreadLocal();

  private static DatabaseManager instance;


  private DatabaseManager() {

    init();
  }


  protected void init() {

    executeQuery("create table if not exists song (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, file varchar(2000), track varchar(50), artist varchar(2000), artist_sort varchar(2000), artist_key char(1), album varchar(2000), album_sort varchar(2000), album_key char(1), title varchar(2000), title_sort varchar(2000), title_key char(1), size integer, unique(file))");
    executeQuery("create table if not exists import (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, file varchar(2000), track varchar(50), artist varchar(2000), artist_sort varchar(2000), artist_key char(1), album varchar(2000), album_sort varchar(2000), album_key char(1), title varchar(2000), title_sort varchar(2000), title_key char(1), size integer, unique(file))");
    executeQuery("create table if not exists bad_song (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, file varchar(2000), message varchar(2000), unique(file))");
    executeQuery("create table if not exists import_error (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, file varchar(2000), message varchar(2000), unique(file))");
    executeQuery("CREATE TABLE IF NOT EXISTS sticky (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, artist VARCHAR(2000), album VARCHAR(2000), name VARCHAR(2000), type VARCHAR(25), stick INTEGER, user_id INTEGER)");
    executeQuery("CREATE TABLE IF NOT EXISTS settings (key VARCHAR(100) PRIMARY KEY, value VARCHAR(500), user_id INTEGER)");
    executeQuery("CREATE TABLE IF NOT EXISTS user (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, username varchar(100), password varchar(100), token varchar(100), expires BIGINT, unique(username))");
    executeQuery("create table if not exists queue (index INTEGER PRIMARY KEY, file varchar(2000))");

    try {
      // This is because there's know IF NOT EXISTS for CREATE FUNCTION from what I can tell
      query("select alphabetizeLinguistically('The Cure') from bad_song limit 1");
    } catch (RuntimeException e) {
      executeQuery("CREATE FUNCTION "
                   + "alphabetizeLinguistically(c VARCHAR(2000)) "
                   + "RETURNS VARCHAR(2000) "
                   + "NO SQL "
                   + "LANGUAGE JAVA PARAMETER STYLE JAVA "
                   + "SPECIFIC alphabetizeLinguistically "
                   + "EXTERNAL NAME 'CLASSPATH:com.synchophy.util.StringUtils.alphabetizeLinguistically'");
    }
    query("select alphabetizeLinguistically('The Cure') from bad_song limit 1");

  }


  public void executeQuery(String sql) {

    executeQuery(sql, new Object[0]);
  }


  public void executeQuery(String sql, Object[] params) {

    try {
      Connection c = getConnection();
      PreparedStatement sth = c.prepareStatement(sql);
      for (int i = 0; i < params.length; i++) {
        sth.setObject(i + 1, params[i]);
      }

      sth.execute();
    } catch (SQLException e) {
      e.printStackTrace();
      throw new RuntimeException("Unable to execute query " + sql, e);
    }
  }


  public List query(String sql) {

    return query(sql, new Object[0]);

  }


  public List query(String sql, Object[] params) {

    return query(sql, params, new String[]{
      "name"
    });
  }


  public List query(String sql, Object[] params, String[] outputKeys) {

    try {
      Connection c = getConnection();
      PreparedStatement sth = c.prepareStatement(sql);
      for (int i = 0; i < params.length; i++) {
        sth.setObject(i + 1, params[i]);
      }

      List result = new ArrayList();

      ResultSet rs = sth.executeQuery();
      ResultSetMetaData md = rs.getMetaData();
      int columnCount = md.getColumnCount();
      if (outputKeys.length != columnCount) {
        outputKeys = new String[columnCount];
        for (int i = 0; i < columnCount; i++) {
          outputKeys[i] = md.getColumnName(i + 1);
        }
      }

      while (rs.next()) {
        Map row = new HashMap();
        for (int i = 0; i < columnCount; i++) {
          row.put(outputKeys[i], rs.getObject(i + 1));
        }
        result.add(row);
      }
      return result;
    } catch (SQLException e) {
      e.printStackTrace();
      throw new RuntimeException("Unable to execute query " + sql, e);
    }

  }


  public PreparedStatement prepare(String sql) {

    try {
      Connection c = getConnection();
      PreparedStatement sth = c.prepareStatement(sql);
      return sth;
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return null;
  }


  public Connection getConnection() {

    try {
      if (connection.get() == null) {
        connection.set(DriverManager.getConnection("jdbc:hsqldb:file:music", "SA", ""));
      }
      return (Connection) connection.get();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return null;
  }


  protected void close() {

    try {
      Connection c = (Connection) connection.get();
      if (c != null) {
        c.close();
      }
      connection.set(null);
    } catch (SQLException e) {
      // TODO log warning
    }
  }


  public void shutdown() {

    executeQuery("SHUTDOWN;");
    close();
  }


  public static synchronized DatabaseManager getInstance() {

    if (instance == null) {
      instance = new DatabaseManager();
    }
    return instance;
  }


  public List loadQueueFiles() {

    return DatabaseManager.getInstance().query("select file from queue order by index",
                                               new Object[0],
                                               new String[]{
                                                 "file"
                                               });
  }


  public List loadQueue() {

    return DatabaseManager.getInstance()
        .query("select q.index, trim(LEADING '0' FROM title_sort), artist_sort, album_sort from song s, queue q where s.file = q.file order by index",
               new Object[0],
               new String[]{
                   "index", "name", "artist", "album"
               });
  }

}
